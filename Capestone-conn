library(RODBC)
library(odbc)
dsn_driver <- "{IBM DB2 ODBC Driver}"
dsn_database <- "bludb"
dsn_hostname <- "b0aebb68-94fa-46ec-a1fc-1c999edb6187.c3n41cmd0nqnrk39u98g.databases.appdomain.cloud"
dsn_port <- "31249"
dsn_protocol <- "TCPIP"
dsn_uid <- "gjb11938"
dsn_pwd <- "v1Q7dBZHJea3aNMf"
dsn_security <- "ssl"

conn <- odbcDriverConnect(paste0("DRIVER=", dsn_driver,
                                 ";DATABASE=", dsn_database,
                                 ";HOSTNAME=", dsn_hostname,
                                 ";PORT=", dsn_port,
                                 ";PROTOCOL=", dsn_protocol,
                                 ";UID=", dsn_uid,
                                 ";PWD=", dsn_pwd,
                                 ";SECURITY=", dsn_security))

conn
sql.info <- sqlTypeInfo(conn)
conn.info <- odbcGetInfo(conn)
conn.info["DBMS_Name"]
conn.info["DBMS_Ver"]
conn.info["Driver_ODBC_Ver"]


#city_weather

WEATHER_FORECAST<- read.csv('C:/Users/LENOVO/Desktop/slides/SQLDATA/cities_weather_forecast (2).csv')
str(WEATHER_FORECAST)
dim(WEATHER_FORECAST)
View(WEATHER_FORECAST)
DF1 <- sqlQuery (conn, "CREATE TABLE cityWether(CITY char (6) NOT NULL, WEATHER char (20),
                    VISIBILITY int,
                    TEMP num ,
                    TEMP_MIN num (20),
                    TEMP_MAX num (20),
                    PRESSURE int,
                    HUMIDITY int,
                    WIND_SPEED num (20),
                    WIND_DEG int,
                     SEASON char (20),
                     FORECAST_DATETIME CHAR (20),
                    PRIMARY KEY (CITY)
              
                    
                   )",
                   errors = FALSE)

if(DF1 == -1){
  cat ("An error has occured.\n")
  msg <- odbcGetErrMsg(conn)
  print (msg)
} else {
  cat ("Table was createdd successfuly.\n")
}


sqlSave(conn,WEATHER_FORECAST,'cityWether',append=TRUE, fast=FALSE, rownames=FALSE, colnames=FALSE, verbose=FALSE)

# bike_sharing_systems:

bike_sharing_systems <- read.csv('C:/Users/LENOVO/Desktop/slides/SQLDATA/bike_sharing_systems (1).csv')
str(bike_sharing_systems)
dim(bike_sharing_systems)
View(bike_sharing_systems)

DF2 <- sqlQuery (conn, "CREATE TABLE sharingSystems(COUNTRY char (6), CITY char (20) NOT NULL,
                    SYSTEM char (20),
                    BICYCLES int,
                    PRIMARY KEY (CITY)
                   )",
                 errors = FALSE)

if(DF2 == -1){
  cat ("An error has occured.\n")
  msg <- odbcGetErrMsg(conn)
  print (msg)
} else {
  cat ("Table was createdd successfuly.\n")
}

sqlSave(conn,bike_sharing_systems,'sharingSystems',append=TRUE, fast=FALSE, rownames=FALSE, colnames=FALSE, verbose=FALSE)

#3rd seoul_bike_sharing (2)

seoul_bike_sharing<- read.csv('C:/Users/LENOVO/Desktop/slides/SQLDATA/seoul_bike_sharing (2).csv')
str(seoul_bike_sharing)
dim(seoul_bike_sharing)
View(seoul_bike_sharing)

DF3 <- sqlQuery (conn, "CREATE TABLE SEOULSHARING (DATE varchar (6), RENTED_BIKE_COUNT int,
                    HOUR int,
                    TEMPERATURE num (20),
                    HUMIDITY int,
                    WIND_SPEED num (20),
                    VISIBILITY int,
                    DEW_POINT_TEMPERATURE num (20),
                    SOLAR_RADIATION num (20),
                    RAINFALL num (20),
                    SNOWFALL num (20),
                    SEASONS char (6),
                    HOLIDAY char (6),
                    FUNCTIONING_DAY char (20) NOT NULL,
                    PRIMARY KEY (FUNCTIONING_DAY)
                   )",
                 errors = FALSE)

if(DF3 == -1){
  cat ("An error has occured.\n")
  msg <- odbcGetErrMsg(conn)
  print (msg)
} else {
  cat ("Table was createdd successfuly.\n")
}

sqlSave(conn,seoul_bike_sharing,'SEOULSHARING',append=TRUE, fast=FALSE, rownames=FALSE, colnames=FALSE, verbose=FALSE)

# 4th world_cities (1)

world_cities<- read.csv('C:/Users/LENOVO/Desktop/slides/SQLDATA/world_cities (1).csv')
str(world_cities)
dim(world_cities)
View(world_cities)

DF4 <- sqlQuery (conn, "CREATE TABLE world(CITY char (6)  NOT NULL, CITY_ASCII char (20),
                    LAT num (20),
                    LNG num (20),
                    COUNTRY char (20),
                    ISO2 char (20),
                    ISO3 char (20),
                    ADMIN_NAME char (20),
                    CAPITAL char (20),
                    POPULATION num (20),
                    ID num (20),
                    PRIMARY KEY (CITY)
                   )",
                 errors = FALSE)

if(DF4 == -1){
  cat ("An error has occured.\n")
  msg <- odbcGetErrMsg(conn)
  print (msg)
} else {
  cat ("Table was createdd successfuly.\n")
}


# query 0 Determine how many records are in the seoul_bike_sharing dataset.Â¶
fetch0 <- sqlFetch(conn, 'seoulSharing')
tail(fetch0)
dim(fetch0)
fetch0
sqlQuery(select humidity)
info <- paste('select count (*) as total_of_records
                from seoulSharing')
query0 <- sqlQuery(conn, info, believeNRows = FALSE)
query0
